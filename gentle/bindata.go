package main

import (
    "bytes"
    "compress/gzip"
    "fmt"
    "io"
    "strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

func index_html() ([]byte, error) {
	return bindata_read([]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x00, 0xff, 0x44, 0x8e,
		0x31, 0x0f, 0x82, 0x40, 0x0c, 0x85, 0x77, 0x7e, 0xc5, 0xf3, 0x76, 0x61,
		0x75, 0x38, 0x58, 0xd0, 0xb8, 0xa9, 0x83, 0x0b, 0x63, 0x81, 0xc2, 0x91,
		0x40, 0x2f, 0xc1, 0x12, 0xc3, 0xbf, 0x97, 0xe3, 0x34, 0x4e, 0xef, 0xa5,
		0xed, 0xf7, 0xa5, 0xf6, 0x70, 0xbe, 0x97, 0xcf, 0xea, 0x71, 0x81, 0xd3,
		0x69, 0x2c, 0x12, 0x1b, 0x02, 0x23, 0x49, 0x9f, 0x1b, 0x16, 0x53, 0x24,
		0x80, 0x75, 0x4c, 0x6d, 0x28, 0x5b, 0x9d, 0x58, 0x09, 0x8d, 0xa3, 0xf9,
		0xc5, 0x9a, 0x9b, 0x45, 0xbb, 0xe3, 0xc9, 0x7c, 0x57, 0x3a, 0xe8, 0xc8,
		0xc5, 0x95, 0x65, 0x0b, 0x94, 0xb7, 0xd2, 0x66, 0x71, 0x12, 0x0c, 0xd9,
		0x4f, 0x61, 0x6b, 0xdf, 0xae, 0x11, 0xf8, 0x5f, 0xe2, 0xcd, 0x35, 0x06,
		0x51, 0x9e, 0x3b, 0x6a, 0x38, 0x45, 0xe5, 0x17, 0x34, 0x24, 0x68, 0x3d,
		0xc4, 0xab, 0x1b, 0xa4, 0xc7, 0xca, 0x9a, 0xee, 0xa2, 0xc8, 0x6f, 0xc2,
		0xfd, 0xdb, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x85, 0x9a, 0x7f, 0xde,
		0xbe, 0x00, 0x00, 0x00,
		},
		"index.html",
	)
}


// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string] func() ([]byte, error) {
	"index.html": index_html,
}
